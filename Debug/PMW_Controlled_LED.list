
PMW_Controlled_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00010400  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000400  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000400  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b65  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000297  00000000  00000000  00010f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00011230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  000112c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de20  00000000  00000000  00011328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e60  00000000  00000000  0001f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fc2d  00000000  00000000  0001ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006fbd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f8  00000000  00000000  0006fc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003e0 	.word	0x080003e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003e0 	.word	0x080003e0

080001d8 <pa1_adc_init>:
#define CR2_CONT		(1U<<1)
#define CR2_SWSTART		(1U<<30)
#define SR_EOC			(1U<<1)

void pa1_adc_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/*======= Configure GPIOA =======*/

	/* Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <pa1_adc_init+0x4c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a10      	ldr	r2, [pc, #64]	; (8000224 <pa1_adc_init+0x4c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set the mode of PA1 to analog mode */
	GPIOA->MODER |= GPIOA_ANALOG;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <pa1_adc_init+0x50>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <pa1_adc_init+0x50>)
 80001ee:	f043 030c 	orr.w	r3, r3, #12
 80001f2:	6013      	str	r3, [r2, #0]

	/*======= Configure ADC Module =======*/
	/* Enable clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <pa1_adc_init+0x4c>)
 80001f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80001f8:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <pa1_adc_init+0x4c>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6453      	str	r3, [r2, #68]	; 0x44

	/* Conversion sequence start */
	ADC1->SQR3 = ADC_CH1;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <pa1_adc_init+0x54>)
 8000202:	2201      	movs	r2, #1
 8000204:	635a      	str	r2, [r3, #52]	; 0x34

	/* Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <pa1_adc_init+0x54>)
 8000208:	2200      	movs	r2, #0
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable ADC module */
	ADC1->CR2 |= CR2_ADON;
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <pa1_adc_init+0x54>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a06      	ldr	r2, [pc, #24]	; (800022c <pa1_adc_init+0x54>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6093      	str	r3, [r2, #8]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020000 	.word	0x40020000
 800022c:	40012000 	.word	0x40012000

08000230 <start_continuous_conversion>:

void start_continuous_conversion(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	/* Enable continuous conversion */
	ADC1->CR2 |= CR2_CONT;
 8000234:	4b08      	ldr	r3, [pc, #32]	; (8000258 <start_continuous_conversion+0x28>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <start_continuous_conversion+0x28>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6093      	str	r3, [r2, #8]
	/* Start ADC conversion */
	ADC1->CR2 |= CR2_SWSTART;
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <start_continuous_conversion+0x28>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a04      	ldr	r2, [pc, #16]	; (8000258 <start_continuous_conversion+0x28>)
 8000246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800024a:	6093      	str	r3, [r2, #8]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40012000 	.word	0x40012000

0800025c <adc_read>:

uint16_t adc_read(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	/* Wait for conversion to be complete */
	while(!(ADC1->SR & SR_EOC)) {}
 8000260:	bf00      	nop
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <adc_read+0x24>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0302 	and.w	r3, r3, #2
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <adc_read+0x6>

	/* Read converted result */
	return (ADC1->DR);
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <adc_read+0x24>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000272:	b29b      	uxth	r3, r3
}
 8000274:	4618      	mov	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40012000 	.word	0x40012000

08000284 <main>:


uint16_t pot_value;

int main(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	pa1_adc_init();
 8000288:	f7ff ffa6 	bl	80001d8 <pa1_adc_init>
	start_continuous_conversion();
 800028c:	f7ff ffd0 	bl	8000230 <start_continuous_conversion>
	tim2_pa5_pmw();
 8000290:	f000 f80e 	bl	80002b0 <tim2_pa5_pmw>

	while(1)
	{
		pot_value = adc_read();
 8000294:	f7ff ffe2 	bl	800025c <adc_read>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <main+0x28>)
 800029e:	801a      	strh	r2, [r3, #0]
		TIM2->CCR1 = pot_value;
 80002a0:	4b02      	ldr	r3, [pc, #8]	; (80002ac <main+0x28>)
 80002a2:	881a      	ldrh	r2, [r3, #0]
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a8:	635a      	str	r2, [r3, #52]	; 0x34
		pot_value = adc_read();
 80002aa:	e7f3      	b.n	8000294 <main+0x10>
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <tim2_pa5_pmw>:
#define OC_PMW_MODE1	((1U<<6) | (1U<<5))
#define CCER_CC1E		(1U<<0)
#define CR1_CEN			(1U<<0)

void tim2_pa5_pmw(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*======= Configure GPIOA =======*/
	/* Enable clock access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b21      	ldr	r3, [pc, #132]	; (800033c <tim2_pa5_pmw+0x8c>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a20      	ldr	r2, [pc, #128]	; (800033c <tim2_pa5_pmw+0x8c>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA5 mode to alternate function */
	GPIOA->MODER &=~ (1U<<10);
 80002c0:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1e      	ldr	r2, [pc, #120]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 80002cc:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002d6:	6013      	str	r3, [r2, #0]

	/* Set PA5 alternate function type to TIM2_CH1 (AF01) */
	GPIOA->AFR[0] |= AFR5_TIM;
 80002d8:	4b19      	ldr	r3, [pc, #100]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002da:	6a1b      	ldr	r3, [r3, #32]
 80002dc:	4a18      	ldr	r2, [pc, #96]	; (8000340 <tim2_pa5_pmw+0x90>)
 80002de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e2:	6213      	str	r3, [r2, #32]

	/*======= Configure TIM2 =======*/
	/* Enable clock access to tim2 */
	RCC->APB1ENR |= TIM2EN;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <tim2_pa5_pmw+0x8c>)
 80002e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e8:	4a14      	ldr	r2, [pc, #80]	; (800033c <tim2_pa5_pmw+0x8c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6413      	str	r3, [r2, #64]	; 0x40

	/* Set prescalar value */
	TIM2->PSC = 4 - 1;		// 16 000 000 / 4 = 4 000 000 Hz
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f4:	2203      	movs	r2, #3
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set auto-reload value */
	TIM2->ARR = 4096 - 1;	// 4 000 000 / 4096 = 976.56 Hz PMW signal
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000300:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Start with 0% duty cycle */
	TIM2->CCR1 = 0;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000306:	2200      	movs	r2, #0
 8000308:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set output compare pmw mode 1 */
	TIM2->CCMR1 = OC_PMW_MODE1;
 800030a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030e:	2260      	movs	r2, #96	; 0x60
 8000310:	619a      	str	r2, [r3, #24]

	/* Enable tim2 ch1 in compare mode */
	TIM2->CCER |= CCER_CC1E;
 8000312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6213      	str	r3, [r2, #32]

	/* Enable timer */
	TIM2->CR1 |= CR1_CEN;
 8000322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40023800 	.word	0x40023800
 8000340:	40020000 	.word	0x40020000

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 f811 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff85 	bl	8000284 <main>

0800037a <LoopForever>:

LoopForever:
  b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000388:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 800038c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000390:	20000020 	.word	0x20000020

08000394 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC_IRQHandler>
	...

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4d0d      	ldr	r5, [pc, #52]	; (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2600      	movs	r6, #0
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4d0b      	ldr	r5, [pc, #44]	; (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	; (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2600      	movs	r6, #0
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
